# -*- coding: utf8 -*-
import telebot
from telebot import types
import config
import psycopg2
import requests
import threading
from bs4 import BeautifulSoup
import lxml
import time
import os
import random
from selenium import webdriver
from selenium.common.exceptions import UnexpectedAlertPresentException
from fake_useragent import UserAgent
global db
global sql
global subjects_dict
global random_password
subjects_dict={'english':'–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞', 'biology':'–ë—ñ–æ–ª–æ–≥—ñ—è', 'geography':'–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è', 'ukraine-history': '–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏', 'mathematics':'–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'ukrainian':'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'physics':'–§—ñ–∑–∏–∫–∞', 'chemistry':'–•—ñ–º—ñ—è'}
db = psycopg2.connect(database='ddk9qa7sutb4mr', user='adwzndgecbixjz', port="5432", password='bd23abc77f0204811cb49b7f97c00885ff3403ce9c4410a9b34a7daf33b51af0', host='ec2-35-171-250-21.compute-1.amazonaws.com', sslmode='require')
sql=db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS users (chatid TEXT, cursub TEXT)""")
db.commit()
#right_answers INT, wrong_answers INT, skipped_answers INT,
sql.execute("""CREATE TABLE IF NOT EXISTS subjects (chatid TEXT, subject TEXT, right_answers INT, wrong_answers INT, skipped_answers INT, curques INT)""")
db.commit()
sql.execute("""CREATE TABLE IF NOT EXISTS skipped (chatid TEXT, subject TEXT, curques INT)""")
db.commit()
sql.execute("""CREATE TABLE IF NOT EXISTS helps (chatid TEXT, subject TEXT, curques INT)""")
db.commit()
sql.execute("""CREATE TABLE IF NOT EXISTS helpers (chatid TEXT, subject TEXT, amount INT, status TEXT)""")
db.commit()
sql.execute("""CREATE TABLE IF NOT EXISTS admins (chatid TEXT, username TEXT)""")
db.commit()
sql.execute("""CREATE TABLE IF NOT EXISTS abits (chatid TEXT, fio TEXT)""")
db.commit()
sql.execute("""CREATE TABLE IF NOT EXISTS abits_checks (chatid TEXT, link TEXT, name TEXT)""")
db.commit()

#sql.execute(f"DELETE FROM helpers")
#db.commit()
#sql.execute(f"DELETE FROM helps")
#db.commit()




def last_ques_check(subject):
    headers = {"user-agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"}
    req = requests.get(f'https://zno.osvita.ua/{subject}/list.html', headers=headers)
    soup = BeautifulSoup(req.content, "html.parser")
    amount_ques = soup.find("div", class_="task-card current").find("div").get_text(strip=True)
    amount_ques = int(amount_ques[len(amount_ques)-4:])
    return amount_ques


bot=telebot.TeleBot(config.TOKEN)

def clock_message(message, clocks_list, msg, clock_sended):
    if clocks_list==[]:
        clocks_list=list('üïõüïêüïëüïíüïìüïîüïïüïñüïóüïòüïôüïöüïõ')
        clocks_list.pop(0)
    time.sleep(0.05)
    msg = f"{msg.replace(msg[len(msg)-2:], '')} {clocks_list[0]}"
    try:
        bot.edit_message_text(msg, chat_id=clock_sended.chat.id, message_id=clock_sended.message_id, parse_mode='html')
        clocks_list.pop(0)
    except:
        pass
    return clocks_list

def start_clock(message, download_thread):
    download_thread.start()
    clocks_list = list('üïõüïêüïëüïíüïìüïîüïïüïñüïóüïòüïôüïöüïõ')
    msg = f'–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞ {clocks_list[0]}'
    clocks_list.pop(0)
    clock_sended = bot.send_message(message.chat.id, msg, parse_mode='html')
    while download_thread.is_alive()!=False:
        clocks_list=clock_message(message, clocks_list, msg, clock_sended)
    bot.delete_message(clock_sended.chat.id, clock_sended.message_id) 

@bot.message_handler(commands=['start'])
def welcome(message):
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res is None:
        msg = '–í—ñ—Ç–∞—é! –î—è–∫—É—é, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–ª–∏—Ö –∑–∞–≤–¥–∞–Ω—å —ñ–∑ –ó–ù–û –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @znotasks_bot. –£—Å—ñ —Ç–µ—Å—Ç–∏ –∑—ñ–±—Ä–∞–Ω—ñ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ —Å–∞–π—Ç—É –æ—Å–≤—ñ—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏ zno.osvita.ua.\n\n–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–∞–º –±—É–¥–µ –Ω–∞–¥–∞–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.\n\n–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–Ω–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏". –¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç—É, –ø–æ–∫–∏ –≤–∏ –Ω–µ –∑–∞—Å—Ç–æ—Å—É—î—Ç–µ –∫–æ–º–∞–Ω–¥—É /skipped —Ç–∞ –Ω–µ –¥–∞—Å—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω—å–æ–≥–æ.\n\n–ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ—Ä—è–¥. –£ —Å–≤–æ—é —á–µ—Ä–≥—É –≤–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —ñ–Ω—à–∏–º, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å –∫–æ–º–∞–Ω–¥–æ—é /tohelp.\n\n–£ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /resetquestion.\n\n–í–∏ –º–æ–∂–µ—Ç–µ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /stats —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ - /globalstats.\n\n–£ –¥–µ—è–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –±–æ—Ç–∞ —î –∫–Ω–æ–ø–∫–∞ –∑ –µ–º–æ–¥–∑—ñ "‚ùå". –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏ –Ω–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç.\n\n<b>–£–≤–∞–≥–∞!</b> –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–∞–º —Ç–∞ –Ω–µ –Ω–∞–¥–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç—É.\n\n'
        bot.send_message(message.chat.id, msg, parse_mode='html')
        time.sleep(5)
        link_reply = types.InlineKeyboardMarkup()
        link_reply.add(types.InlineKeyboardButton('–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è', url='https://t.me/znotasks'))
        bot.send_message(message.chat.id, f'–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –∫–∞–Ω–∞–ª—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç—É. –í—ñ–¥ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∫–∞–Ω–∞–ª—É –∑–∞–ª–µ–∂–∏—Ç—å —Ä–æ–∑–≤–∏—Ç–æ–∫ –±–æ—Ç—É, –∞ –Ω–∞–º –≤–∞–∂–ª–∏–≤–∞ –¥—É–º–∫–∞ –∫–æ–∂–Ω–æ–≥–æ.', reply_markup=link_reply)
        time.sleep(10)
        start_reply = types.InlineKeyboardMarkup(row_width=2)
        start_reply.add(types.InlineKeyboardButton('‚úÖ –ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–∏–π(–∞)', callback_data=f'start-{message.from_user.id}'))
        msg = '–Ø–∫—â–æ –≤–∏ –ø–æ–±–∞—á–∏–ª–∏ –ø–æ–º–∏–ª–∫—É –≤ –ø–µ–≤–Ω–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É/–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (–¥–∏–≤—ñ—Ç—å—Å—è –æ–ø–∏—Å –¥–æ —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É).\n\n–Ü—Å–Ω—É—é—Ç—å —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å.\n\n–Ø–∫—â–æ –≤–∞–º –ø—Ä–æ–ø–æ–Ω—É—î—Ç—å—Å—è –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ê-–î, –≤–∞–º –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.\n\n–£ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ —Ü–∏—Ñ—Ä–∞–º–∏ —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ª—ñ—Ç–µ—Ä–∞–º–∏), –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è" —ñ –Ω–∞–ø–∏—à—ñ—Ç—å –ª—ñ—Ç–µ—Ä–∏ (—Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ) —É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º: –≥–≤–±–∞ –∞–±–æ –ì–í–ë–ê (–±–æ—Ç —Ä–æ–∑—Ü—ñ–Ω—é—î —Ü–µ —è–∫ 1 - –ì, 2 - –í, 3 - –ë, 4 - –ê —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–∂–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –æ–∫—Ä–µ–º–æ).\n\n–Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ —ñ–∑ –ø–µ—Ä–µ–ª—ñ–∫—É, –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –≤ –±—É–¥—å-—è–∫—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ.\n\n–û–∑–Ω–∞–π–æ–º–∏–≤—à–∏—Å—å –∑ —É—Å—ñ—î—é –≤–∏—â–µ –∑–∞–∑–Ω–∞—á–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–æ—á–∞—Ç–∫—É.'
        bot.send_message(message.chat.id, msg, reply_markup=start_reply, parse_mode='html')
    else:
        checking_ques(message)

@bot.message_handler(commands=['deleteme'])
def to_delete(message):
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res is None:
        return bot.reply_to(message, "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
    delete_me_reply=types.InlineKeyboardMarkup(row_width=2)
    delete_me_reply.add(types.InlineKeyboardButton('‚úÖ –ì–∞—Ä–∞–∑–¥, –≤–∏–¥–∞–ª—ñ—Ç—å –º—ñ–π –∞–∫–∞—É–Ω—Ç', callback_data='delme'))
    delete_me_reply.add(types.InlineKeyboardButton('‚ùå –ù—ñ, –ø–æ–∫–∏ —â–æ –Ω–µ —Ç—Ä–µ–±–∞', callback_data='nodelme'))
    msg=f"–Ø–∫—â–æ –≤–∏ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç (—É—Å—ñ –≤–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –±—É–¥—É—Ç—å –∞–Ω—É–ª—å–æ–≤–∞–Ω—ñ), –ø–∞–º'—è—Ç–∞–π—Ç–µ, —â–æ –≤–∏ –≤–∂–µ <b>–Ω–µ –∑–º–æ–∂–µ—Ç–µ</b> —ó—Ö –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–∞ <b>–Ω–µ –±—É–¥–µ—Ç–µ</b> –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç—É."
    bot.send_message(message.chat.id, msg, parse_mode='html', reply_markup=delete_me_reply)

@bot.message_handler(commands=['tohelp'])
def helps_list(message):
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    res = sql.fetchone()
    if res is None:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
    sql.execute(f"SELECT * FROM helpers WHERE chatid = '{message.chat.id}' AND status = 'banned'")
    res = sql.fetchone()
    if res!=None:
        return bot.reply_to(message, "‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
    sql.execute(f"SELECT * FROM helps")
    rows = sql.fetchall()
    counter = 0
    helps_list_reply=types.InlineKeyboardMarkup(row_width=2)
    for row in rows:
        if int(row[0])==message.chat.id:
            continue
        counter += 1
        helps_list_reply.add(types.InlineKeyboardButton(f'{sub_to_right(row[1])} (#{row[2]})', callback_data=f'givehelp-{row[1]}-{row[2]}'))
    if counter==0:
        return bot.reply_to(message, f'‚ö†Ô∏è –ñ–æ–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –∑ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
    helps_list_reply.add(types.InlineKeyboardButton("‚ùå", callback_data='delmsg'))
    bot.send_message(message.chat.id, f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤: <b>{counter}</b>', parse_mode='html', reply_markup=helps_list_reply)

@bot.message_handler(commands=['makeadmin'])
def making_admin(message):
    global random_password
    if message.from_user.username=='jerwright':
        chars = '+-/*!&$#?=@<>abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
        random_password=''
        for i in range(4):
            random_password=random_password+random.choice(chars)
        bot.send_message(message.chat.id, f'–ü–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {random_password}')

@bot.message_handler(commands=['alogin'])
def giving_admin(message):
    do_login = bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(do_login, doing_login)
def doing_login(message):
    global random_password
    if message.text=='/cancel':
        return bot.reply_to(message, "‚úÖ –î—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞")
    if message.text==random_password:
        chars = '+-/*!&$#?=@<>abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
        random_password=''
        for i in range(4):
            random_password=random_password+random.choice(chars)
        print(random_password)
        create_username = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º")
        bot.register_next_step_handler(create_username, creating_username)
def creating_username(message):
    if message.text=='/cancel':
        return bot.reply_to(message, "‚úÖ –î—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞")
    sql.execute(f"SELECT * FROM admins WHERE chatid = '{message.chat.id}'")
    res = sql.fetchone()
    if res != None:
        return
    sql.execute("INSERT INTO admins VALUES (%s, %s)", (message.chat.id, message.text))
    db.commit()

@bot.message_handler(commands=['admins'])
def check_admins(message):
    sql.execute(f"SELECT * FROM admins")
    rows = sql.fetchall()
    admin=False
    msg = f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –±–æ—Ç—É:\n'
    for row in rows:
        if int(row[0]) == message.chat.id:
            admin=True
        msg = f'{msg}<b>{row[1]}</b>, '
    msg = msg[:-2]
    if admin!=True:
        return
    bot.send_message(message.chat.id, msg, parse_mode='html')

@bot.message_handler(commands=['removeadmin'])
def remove_admin(message):
    if message.from_user.username == 'jerwright':
        do_remove = bot.send_message(message.chat.id, "–£–∫–∞–∂—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        bot.register_next_step_handler(do_remove, doing_remove)
def doing_remove(message):
    if message.text=='/cancel':
        return bot.reply_to(message, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    sql.execute(f"DELETE * FROM admins WHERE username = '{message.text}'")
    db.commit()


@bot.message_handler(commands=['send'])
def login(message):
    if message.from_user.username=='jerwright':
        do_send=bot.send_message(message.from_user.id, "–ß—Ç–æ –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?")
        bot.register_next_step_handler(do_send, sending)
    else:
        return time.sleep(0.5)


def sending(message):
    if message.text=='/cancel':
        return bot.reply_to(message, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    mes=message.text
    sql.execute("SELECT chatid FROM users")
    rows = sql.fetchall()
    counter = 0
    for row in rows:
        try:
            bot.send_message(row[0], mes, parse_mode='html', disable_web_page_preview=True)
            counter += 1
        except:
            pass
    bot.send_message(message.chat.id, f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: <b>{counter}</b>', parse_mode='html')
    time.sleep(0.5)

@bot.message_handler(commands=['abitcheck'])
def abitchecking(message):
    sql.execute(f"SELECT * FROM abits WHERE chatid = '{message.chat.id}'")
    res = sql.fetchone()
    if res is None:
        add_abit = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏ (–ø—Ä–∏–∫–ª–∞–¥: –®–µ–≤—á–µ–Ω–∫–æ –¢.–ì.). –ü—ñ–∑–Ω—ñ—à–µ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ.')
        bot.register_next_step_handler(add_abit, adding_abit)
    else:
        find_abits_checks(message)

def adding_abit(message):
    if list(message.text).count('.')<2:
        return bot.reply_to(message, f'‚ö†Ô∏è –í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏, —è–∫ –ø–æ–∫–∞–∑–∞–Ω–æ —É –ø—Ä–∏–∫–ª–∞–¥—ñ.')
    sql.execute("INSERT INTO abits VALUES (%s, %s)", (message.chat.id, message.text))
    db.commit()
    find_abits_checks(message)

def take_abiturl(message, URL=None):
    sql.execute(f"SELECT * FROM abits WHERE chatid = '{message.chat.id}'")
    res = sql.fetchone()
    fio = res[1]
    if URL==None:
        do_takeurl = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫ –ø–µ–≤–Ω–æ—ó —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ —É—á–±–æ–≤–æ–≥–æ –∑–∞–∫–ª–∞–¥—É (—Ç—ñ–ª—å–∫–∏ –Ω–∞ —Å–∞–π—Ç—ñ vstup.osvita.ua)")
        bot.register_next_step_handler(do_takeurl, do_abitcheck, fio)
    else:
        download_thread = threading.Thread(target=do_abitcheck, args=(message, fio, URL))
        start_clock(message, download_thread)

def do_abitcheck(message, fio, URL=None):
    if URL==None:
        URL = message.text.replace('https://', '')
        URL = f'https://{URL}'
    else:
        URL = URL.replace('https://', '')
        URL = f'https://{URL}'
    if 'vstup.osvita.ua' not in URL:
        return bot.reply_to(message, "–£ –≤–∞—à–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ –Ω–µ–º–∞—î –∞–¥—Ä–µ—Å–∏ vstup.osvita.ua. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    user_fio = fio
    user_grate = 0

    #useragent = UserAgent()
    chrome_options = webdriver.ChromeOptions()
    chrome_options.binary_location = os.environ.get("GOOGLE_CHROME_BIN")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--no-sandbox")
    #chrome_options.add_argument(f"user-agent={useragent.random}")
    driver = webdriver.Chrome(executable_path=os.environ.get("CHROMEDRIVER_PATH"), options=chrome_options)

    try:
        driver.get(url=URL)
        time.sleep(2)
        driver.refresh()
        time.sleep(3)
        more_button = driver.find_element_by_xpath("//iframe[@title='iframe']")
        while more_button.is_displayed()==False:
            time.sleep(0.5)
        more_button.click()
        #more_button = driver.find_element_by_class_name('container dtlnk').find_element_by_tag_name('span').click()
        time.sleep(1)
        #–°–æ–±—Ä–∞–ª–∏ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    except UnexpectedAlertPresentException as ex:
        return bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–∞–π—Ç—É —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö —Å–ø—Ä–æ–± –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –±–æ—Ç—É. –ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as ex:
        print(ex)
        return bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–∞–π—Ç—É. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –±—É–ª–∞ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.')
    finally:
        time.sleep(4)
        needed_html_code = driver.page_source
        driver.close()
        driver.quit()
    HEADERS = {'User-Agent': useragent.random}
    soup = BeautifulSoup(needed_html_code, 'html.parser')
    
    #–∏–Ω—Ñ–∞ –ø—Ä–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤—É–∑
    univer_info = soup.find('div', class_='page-vnz-detail-header').find('h1').get_text(strip=True).replace(": ", ":").replace(":", ": ").replace('.', ". ")
    univer_info = f"{univer_info}–ù–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥: {soup.find('div', class_='page-vnz-detail-header').find('h2').get_text(strip=True)}."
    #print(univer_info)

    #–£–∑–Ω–∞–µ–º –∫–æ–ª-–≤–æ –ø–æ–¥–∞–Ω—ã—Ö –º–µ—Å—Ç
    requests_count = int(soup.find('b', class_='requests_count').get_text(strip=True))
    max_dershes = soup.find_all('div', class_='table-of-specs-item panel-mobile')

    contents = ''
    for row in max_dershes:
        if '–ª—ñ—Ü–µ–Ω–∑–æ–≤–∞–Ω–∏–π –æ–±—Å—è–≥ –ø—Ä–∏–π–æ–º—É' in row.get_text(strip=True).lower():
            contents=row.get_text()

    full_info = ''
    symbols_check='–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ó—Ñ—ñ–≤–∞–ø—Ä–æ–ª–¥–∂—î—è—á—Å–º–∏—Ç—å–±—é.:'
    for i in range(len(contents)):
        if contents[i].isdigit() == False and contents[i].lower() not in symbols_check:
            continue
        full_info = f"{full_info}{contents[i]}"
        if contents[i+1] not in symbols_check and contents[i+1].isdigit()!=True:
            full_info = f'{full_info} '
        if contents[i].isdigit()==True and contents[i+1].isdigit()!=True and contents[i+1] not in symbols_check:
            full_info = f'{full_info}\n'

    columns = soup.find_all('tr', {'class':['rstatus6', 'rstatus1']})
    full_list = []
    for column in columns:
        if column.find('td', {'data-th':'–ü–Ü–ë'}).get_text(strip=True).lower() == user_fio.lower():
            user_grate = float(column.find('td', {'data-th':'–ë–∞–ª'}).get_text(strip=True).replace('—Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫', ''))
            user_prio = column.find('td', {'data-th':'–ü'}).get_text(strip=True)
            continue
        full_list.append({
            'fio':column.find('td', {'data-th':'–ü–Ü–ë'}).get_text(strip=True),
            'prio':column.find('td', {'data-th':'–ü'}).get_text(strip=True),
            'bal':float(column.find('td', {'data-th':'–ë–∞–ª'}).get_text(strip=True).replace('—Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫', '')),
            })
        #print(column.find('td', {'data-th':'–ü–Ü–ë'}))

    if user_grate == 0:
        return bot.send_message(message.chat.id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –§–Ü–û <b>{user_fio}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –∞–±–æ –≤–∏ –∑—Ä–æ–±–∏–ª–∏ –ø–æ–º–∏–ª–∫—É —É –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç—ñ.", parse_mode='html')
    print(user_grate)
    prios = {'1':0, '2':0, '3':0, '4':0, '5':0, '-': 0}
    user_place = 1
    same_grate_count = 0
    prios_global_count = 0
    for item in full_list:
        if item['bal']>user_grate:
            user_place += 1
            if item['prio'].isdigit() == True:
                prios[str(item['prio'])] += 1
            else:
                prios['-'] += 1
            prios_global_count += 1
        elif item['bal']==user_grate:
            same_grate_count += 1
            full_list.remove(item)
        else:
            full_list.remove(item)

    msg = f"–í–∏ –Ω–∞ {user_place}/{requests_count} —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤, –∑ —Ç–∞–∫–∏–º –±–∞–ª–æ–º, —è–∫ —É –≤–∞—Å - {same_grate_count}.\n"
    msg = f'{msg}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä—ñ–æ—Ä—ñ—Ç–µ—Ç–Ω–æ—Å—Ç—ñ: '
    for key in prios.keys():
        edited_key = key.replace('-', '–±–µ–∑ –ø—Ä—ñ–æ—Ä—ñ—Ç–µ—Ç–Ω–æ—Å—Ç—ñ')
        percents = str(round(prios[key]*100/prios_global_count))
        msg = f'{msg}{edited_key} - {prios[key]} ({percents}%), '
    msg = msg[:-2]+'\n'
    if user_prio.isdigit()==True:
        msg=f"{msg}–û–¥–Ω–∞–∫, —è–∫—â–æ –≤—Ä–∞—Ö—É–≤–∞—Ç–∏, —â–æ —Ö–æ—á–∞ –± 50% –º–æ–∂–ª–∏–≤–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä—ñ—Ç–µ—Ç, —Å–∏—Ç—É–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ —Ç–∞–∫–∞: "
        for key in prios.keys():
            if key.isdigit()==True:
                if int(user_prio)<int(key):
                    user_place -= int(round(prios[key]/2, 1))
        msg = f'{univer_info}\n\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Å—Ç–æ—Å–æ–≤–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:\n{full_info}\n\n–í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏: {user_fio}\n\n{msg}‚âà{user_place}/{requests_count} (–∑–∞—è–≤–∏ –±–µ–∑ –ø—Ä—ñ–æ—Ä—ñ—Ç–µ—Ç–Ω–æ—Å—Ç—ñ –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏—Å—å)'
    sql.execute(f"SELECT * FROM abits_checks WHERE chatid = '{message.chat.id}' AND link ='{URL}'")
    res = sql.fetchone()
    if res is None:
        sql.execute("INSERT INTO abits_checks VALUES (%s, %s, %s)", (message.chat.id, URL, univer_info))
        db.commit()
    return bot.send_message(message.chat.id, msg, parse_mode='html')

def find_abits_checks(message):
    sql.execute(f"SELECT * FROM abits WHERE chatid = '{message.chat.id}'")
    res = sql.fetchone()
    fio = res[1]
    sql.execute(f"SELECT * FROM abits_checks WHERE chatid = '{message.chat.id}'")
    rows = sql.fetchall()
    abits_checks_reply = types.InlineKeyboardMarkup(row_width=2)
    msg = f'–í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏: {fio}\n'
    if rows == []:
        msg = f'{msg}–ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –¥–æ–¥–∞–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.'
    else:
        msg = f'{msg}–í–∏ –¥–æ–¥–∞–ª–∏ {len(rows)} —Å—Ç–æ—Ä—ñ–Ω–æ–∫:\n'
        counter = 1
        for row in rows:
            msg=f'{msg}<b><u>#{counter}</u> |</b> {row[2]}'
            url = row[1].replace('https://', '')
            abits_checks_reply.add(types.InlineKeyboardButton(f'–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ #{counter}', callback_data=f'abitcheck-{url}'), 
                types.InlineKeyboardButton(f'‚ùå –í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delabitcheck-{row[1]}'))
            counter += 1
    abits_checks_reply.add(types.InlineKeyboardButton(f'üîé –ü–æ—à—É–∫ –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏', callback_data=f'new_abitcheck'))
    bot.send_message(message.chat.id, msg, parse_mode='html', reply_markup=abits_checks_reply)

@bot.message_handler(commands=['checkemp'])
def checking_emp(message):
    do_give_emp=bot.send_message(message.chat.id,'–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–≥–æ–ª–æ—Å —è–∫–æ–≥–æ —à—É–∫–∞—î—Ç–µ.')
    bot.register_next_step_handler(do_give_emp, giving_emp)
def giving_emp(message):
    url = 'https://ru.osvita.ua/test/advice/65116/'
    user_msg = message.text
    headers = {"user-agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"}
    req = requests.get(url, headers=headers)
    soup = BeautifulSoup(req.content, "html.parser")
    items = soup.find("article").find_all("ul")
    contents_list=[]
    for item in items:
        words = item.find_all("li")
        for word in words:
            if word.find_parent(class_='artbutton')!=None:
                continue
            contents_list.append(word.get_text(strip=True))
    found_items=[]
    for content in contents_list:
        if '(' in content:
            index = content.index('(')
            if user_msg.lower() in content.lower()[:index-1]:
                found_items.append(content)
        else:
            if user_msg.lower() in content.lower():
                found_items.append(content) 
    if found_items==[]:
        bot.reply_to(message, f'‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–≥–æ–ª–æ—Å—ñ–≤ –¥–ª—è —Å–ª–æ–≤–∞ <b>"{user_msg.lower()}"</b>.', parse_mode='html')
    else:
        msg = f'–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫—ñ –Ω–∞–≥–æ–ª–æ—Å–∏ –¥–ª—è —Å–ª–æ–≤–∞ <b>"{user_msg.lower()}"</b>:\n'
        for item in found_items:
            msg = f'{msg}‚Ä¢ {item}\n'
        bot.send_message(message.chat.id, msg, parse_mode='html')

@bot.message_handler(commands=['changesub'])
def changing_sub(message):
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res is None:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
    mes = f'–ì–∞—Ä–∞–∑–¥! –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.'
    bot.send_message(message.chat.id, mes, parse_mode='html', reply_markup=subjects_reply)

@bot.message_handler(commands=['skipped'])
def skipped_questions(message):
    sql.execute(f"SELECT * FROM skipped WHERE chatid = '{message.chat.id}'")
    try:
        res = sql.fetchone()
    except:
        return bot.reply_to(message,'‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.')
    if res is None:
        return bot.reply_to(message, f'‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.')
    sql.execute(f"SELECT * FROM skipped WHERE chatid= '{message.chat.id}' ORDER by curques")
    rows = sql.fetchall()
    for row in rows:
        checking_ques(message, skipped_ques=row[2], subject=row[1])


@bot.message_handler(commands=['resetquestion'])
def reseting(message):
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res!=None:
        checking_ques(message)
    else:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É")

@bot.message_handler(commands=['stats'])
def statistics(message):
    sql.execute(f"SELECT cursub FROM users WHERE chatid = '{message.chat.id}'")
    subject = sql.fetchone()
    if subject is None:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
    statistics_reply=types.InlineKeyboardMarkup(row_width=2)
    for row in subjects_dict:
        statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'statistics-{row}'))
    statistics_reply.add(types.InlineKeyboardButton("‚ùå", callback_data='delmsg'))
    bot.send_message(message.chat.id, get_statistics(message, subject[0]), parse_mode='html', reply_markup=statistics_reply)
def get_statistics(message, subject, call=None):
    sql.execute(f"SELECT * FROM helpers WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res = sql.fetchone()
    if res is None:
        help_count=0
    else:
        help_count=str(res[2])
        if res[3]=='banned':
            help_count = f'{help_count} (–¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ)'

    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res=sql.fetchone()
    if res!=None:
        msg = f'üìà –í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ üìà\n\n'
        try:
            msg = f'{msg}<b>{sub_to_right(res[1])}</b>\n–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[2]}</b>\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[3]}</b>\nüí® –ü—Ä–æ–ø—É—â–µ–Ω–∏—Ö - <b>{res[4]}</b>\n\nüéØ –¢–æ—á–Ω—ñ—Å—Ç—å: <b>{round(int(res[2])*100/(int(res[2])+int(res[3])+int(res[4])), 2)}%</b>\n\nüí™ –ó–∞—Ä–∞–∑ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—ñ: <b>{res[5]}/{last_ques_check(res[1])}</b>\n\nüôè –ü–æ—è—Å–Ω–µ–Ω—å: {help_count}\n\n'
        except ZeroDivisionError:
            msg = f'{msg}<b>{sub_to_right(res[1])}</b>\n–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[2]}</b>\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[3]}</b>\nüí® –ü—Ä–æ–ø—É—â–µ–Ω–∏—Ö - <b>{res[4]}</b>\n\nüéØ –¢–æ—á–Ω—ñ—Å—Ç—å: –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—ñ\n\nüí™ –ó–∞—Ä–∞–∑ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—ñ: <b>{res[5]}/{last_ques_check(res[1])}</b>\n\nüôè –ü–æ—è—Å–Ω–µ–Ω—å: {help_count}\n\n'
        sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}'")
        rows=sql.fetchall()
        if len(rows)<=1:
            return msg
        table_dict={}
        for row in rows:
            table_dict.update({row[1]:round(int(row[2])*100/(int(row[2])+int(row[3])+int(row[4])), 2)})
        worst_list={}
        worst_list.update({res[1]:table_dict[res[1]]})
        worst_list_sub=res[1]
        for sub in table_dict.keys():
            if table_dict[sub]<worst_list[worst_list_sub]:
                worst_list.clear()
                worst_list.update({sub:table_dict[sub]})
                worst_list_sub=sub
            elif table_dict[sub]==worst_list[worst_list_sub]:
                worst_list.update({sub:table_dict[sub]})
        msg = f'{msg}–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ —Ç–∞–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (–≤–∏–∑–Ω–∞—á–µ–Ω–æ –∑–∞ —Ç–æ—á–Ω—ñ—Å—Ç—é), —è–∫:'
        for sub in worst_list.keys():
            msg = f'{msg} <b>{sub_to_right(sub)}</b>,'
            percents=worst_list[sub]
        msg = f'{msg[:len(msg)-1]} (<b>{percents}%</b>) —î –Ω–∞–π–Ω–∏–∂—á–∏–º–∏ —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö. –û–¥–Ω–∞–∫ —É—Å–µ —â–µ –ø–æ–ø–µ—Ä–µ–¥—É!\n\n'
        return msg
    else:
        return bot.reply_to(message, f"‚ö†Ô∏è –í–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç–∏ –∑ —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É.")

@bot.message_handler(commands=['globalstats'])
def global_statistics(message):
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res is None:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /changesub —Ç–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.")
    sql.execute(f"SELECT cursub FROM users WHERE chatid = '{message.chat.id}'")
    subject = sql.fetchone()
    global_statistics_reply=types.InlineKeyboardMarkup(row_width=2)
    for row in subjects_dict:
        global_statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'globalstatistics-{row}'))
    global_statistics_reply.add(types.InlineKeyboardButton("‚ùå", callback_data='delmsg'))
    bot.send_message(message.chat.id, get_global_statistics(message, subject[0]), parse_mode='html', reply_markup=global_statistics_reply)
def get_global_statistics(message, subject, call=None):
    sql.execute(f"SELECT * FROM helpers WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res = sql.fetchone()
    if res is None:
        help_count=0
    else:
        help_count=int(res[2])
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res=sql.fetchone()
    if res is None:
        return bot.reply_to(message, "‚ö†Ô∏è –í–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç–∏ –∑ —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É.")

    #sql.execute(f"SELECT * FROM users")
    #users_number = len(sql.fetchall())
    sql.execute(f"SELECT * FROM helpers WHERE subject = '{subject}'")
    rows = sql.fetchall()
    global_help_count = 0
    for row in rows:
        global_help_count += row[2]
    sql.execute(f"SELECT * FROM users")
    rows = sql.fetchall()
    if rows==[]:
        return bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    all_users_number = len(rows)
    msg=''
    sql.execute(f"SELECT right_answers, wrong_answers, skipped_answers FROM subjects WHERE subject = '{subject}'")
    rows=sql.fetchall()
    if rows == []:
        return bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    users_number = len(rows)
    global_right_answers=0
    global_wrong_answers=0
    global_skipped_answers=0
    for row in rows:
        global_right_answers+=row[0]
        global_wrong_answers+=row[1]
        global_skipped_answers+=row[2]
    try:
        global_right_percents = round((int(res[2])*100)/global_right_answers, 2)
    except ZeroDivisionError: 
        global_right_percents=0.0
    try:
        global_wrong_percents = round((int(res[3])*100)/global_wrong_answers, 2)
    except ZeroDivisionError: 
        global_wrong_percents=0.0
    try:
        global_skipped_percents = round((int(res[4])*100)/global_skipped_answers, 2)
    except ZeroDivisionError: 
        global_skipped_percents=0.0
    try:
        global_help_percents = round((help_count*100)/global_help_count,2)
    except ZeroDivisionError:
        global_help_percents = 0.0
    try:
        accuracy = str(round(int(global_right_answers)*100/(int(global_right_answers)+int(global_wrong_answers)+int(global_skipped_answers)), 2))+'%'
    except ZeroDivisionError: 
        accuracy='–ø–æ–∫–∏ —â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏'
    msg = f'{msg}<b>{subjects_dict[subject]}</b>\nüåê –£—Å—å–æ–≥–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤: <b>{users_number}/{all_users_number}</b>\n\n–ó–∞–≥–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{global_right_answers}</b> (<b>{global_right_percents}%</b> –≤–∞—à–∏—Ö)\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{global_wrong_answers}</b> (<b>{global_wrong_percents}%</b> –≤–∞—à–∏—Ö)\nüí® –ü—Ä–æ–ø—É—â–µ–Ω–∏—Ö - <b>{global_skipped_answers}</b> (<b>{global_skipped_percents}%</b> –≤–∞—à–∏—Ö)\n\nüéØ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å: <b>{accuracy}</b>\n\nüôè –ó–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å: <b>{global_help_count}</b> (<b>{global_help_percents}%</b> –≤–∞—à–∏—Ö)\n\n'
    msg = f'üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ üìà\n\n{msg}'
    sql.execute(f"SELECT chatid, right_answers FROM subjects WHERE subject = '{subject}' ORDER by right_answers DESC")
    rows=sql.fetchall()
    if len(rows)<=1:
        return msg
    counter = 0
    for row in rows:
        previous_amount=rows[counter-1][1]
        counter += 1
        if int(row[0])==message.chat.id:
            if previous_amount==row[1] and counter-2>=0:
                counter -= 1
            break
    user_rating=100-round((counter*100)/len(rows))
    if user_rating==0:
        msg=f'{msg}–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤–∏ –ø–æ—Å—ñ–¥–∞—î—Ç–µ –æ—Å—Ç–∞–Ω–Ω—î –º—ñ—Å—Ü–µ —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –û–¥–Ω–∞–∫ —É—Å–µ —â–µ –ø–æ–ø–µ—Ä–µ–¥—É!\n\n'
        return msg
    msg = f'{msg}–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤–∏ –ø–æ—Å—ñ–¥–∞—î—Ç–µ <b>{counter}/{len(rows)}</b> –º—ñ—Å—Ü–µ. –í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É –∫—Ä–∞—â–µ, –Ω—ñ–∂ —É <b>{user_rating}%</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n'
    return msg


#@bot.message_handler(commands=['others'])
#def otherbots(message):
#    msg = f'<b>–£—Å—ñ –±–æ—Ç–∏ –∑ —Ç–µ—Å—Ç–∞–º–∏ –ó–ù–û:</b>\n\n‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è - @geozno_bot\n‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ - @ukrlzno_bot'
#    bot.send_message(message.chat.id, msg, parse_mode='html')



def checking_ques(message, skipped_ques=None, subject=None, givinghelp=None, admin=None):
    if subject is None:
        sql.execute(f"SELECT cursub FROM users WHERE chatid = '{message.chat.id}'")
        subject = sql.fetchone()
        subject=subject[0]
    sql.execute(f"SELECT curques FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res=sql.fetchone()
    if res is None and givinghelp is None:
        return
    if givinghelp != None:
        user_question=givinghelp
    else:
        user_question=res[0]

    if skipped_ques!=None:
        user_question=skipped_ques
    if user_question>last_ques_check(subject):
        return bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∏ —É—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Ç–µ—Å—Ç–∏. –Ø–∫ —Ç—ñ–ª—å–∫–∏ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç—ñ zno.osvita.ua –∑–±—ñ–ª—å—à–∏—Ç—å—Å—è, –≤–æ–Ω–∏ –∑'—è–≤–ª—è—Ç—å—Å—è —ñ —É –≤–∞—Å.")
    if user_question<=15:  
        url = f"https://zno.osvita.ua/{subject}/list.html"
    elif user_question>15:
        if user_question%15!=0:
            url=f'https://zno.osvita.ua/{subject}/all/{user_question - (user_question%15)}/' 
        else:   
            if int(user_question/15)>=2:
                url=f'https://zno.osvita.ua/{subject}/all/{user_question - 15}/'
            else:
                url=f'https://zno.osvita.ua/{subject}/all/{user_question}/'
    #else:
    #    url=f'https://zno.osvita.ua/{subject}/all/{user_question}/'
    download_thread = threading.Thread(target=getting_ques, args=(message, user_question, url, subject, skipped_ques, givinghelp, admin))
    start_clock(message, download_thread)
    #getting_ques(message, user_question, url, subject, skipped_ques)

def getting_ques(message, user_question, url, subject, skipped_ques=None, givinghelp=None, admin=None):
    headers = {"user-agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"}
    req = requests.get(url, headers=headers)
    soup = BeautifulSoup(req.content, "html.parser")
    form = soup.find('form', {"id":f'q_form_{user_question}'})
    if form is None:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—ñ–¥–æ–º—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É/–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (–∫–æ–Ω—Ç–∞–∫–∏ –≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞).")
    question = f'<b>–ó–∞–≤–¥–∞–Ω–Ω—è #{user_question}</b>\n'
    if form.find("iframe")!=None:
        video = form.find("iframe").get("src")
        question=f'{question}–ù–µ–æ–±—Ö—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {video}\n'
    for row in form.find("div", class_="question").find_all("p"):
        if row.get_text()=='' or row.get_text()=='\n':
            continue
        question = question + html_fix(row.contents)+'\n'
        #if html_fix(row.contents).count("\n")<2:
        #    question = question + '\n'
    if form.find("div", class_="question").p is None:
        question = question + html_fix(form.find("div", class_="question").get_text(strip=True).replace("\n", "", 1))+'\n'
    action = form.find("div", class_="q-info")
    if action==None:
        action = form.find("div", class_="select-answers-title")
    action = action.get_text(strip=True)

    right_answer=form.find("input", {"type":"hidden", "name":"result"}).get("value")
    if right_answer is None:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—ñ–¥–æ–º—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É/–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (–∫–æ–Ω—Ç–∞–∫–∏ –≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞).")
    else:
        right_answer = str(right_answer)
    true_answer_list = {"a": "–∞", "b": "–±", "c": "–≤", "d":"–≥", "e":"–¥"}
    for row in true_answer_list:
        if row in right_answer:
            if subject.lower()!='english':
                right_answer = right_answer.replace(row, true_answer_list[row])
    right_answer=right_answer.upper()
    answers_list=[]
    answers_images=[]
    items = form.find_all("div", class_="answers")
    if items[0].find("div")!=None:
        for item in items:
            for item_answer in item.find_all("div"):
                #print(added_item)
                #print(item_answer.find("span").get_text())
                #added_item=added_item.replace(item_answer.find("span").get_text(), '', 1)
                if item_answer.get('class')[0] == 'quest-title':
                    quest_title=item_answer.contents[0]
                    question = f'{question}\n{quest_title}'
                else:
                    if item_answer.find("img")!=None:
                        answers_images.append('zno.osvita.ua'+item_answer.find("img").get('src'))
                        answers_list.append(item_answer.find("span").get_text(strip=True))
                        continue
                    added_items = item_answer.contents
                    number = item_answer.find("span").get_text(strip=True)
                    answers_list.append(number)
                    added_items.remove(item_answer.find("span"))
                    #added_item=item_answer.get_text()
                    added_item=html_fix(added_items)
                    
                    question = f'{question}\n{number}) {added_item}'
            question = question+'\n'
    else:
        items = form.find("table").find('tr')
        if items!=None:
            for item_answer in items.find_all("th"):
                answers_list.append(item_answer.get_text(strip=True))
    
    img = form.find("div", class_="question").find("img")
    if img != None:
        img_link = f"zno.osvita.ua{img.get('src')}"
    else:
        img_link=None
    
    lets_answer_markup = types.InlineKeyboardMarkup()
    lets_answer_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-one-{subject}-{right_answer.replace(";", "")}{check_skipped(skipped_ques)}'))
    lets_answer_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
    lets_answer_markup = give_help(message, user_question, subject, lets_answer_markup, givinghelp, admin)

    lets_answer_many_markup = types.InlineKeyboardMarkup()
    lets_answer_many_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-many-{subject}-{right_answer.replace(";", "")}{check_skipped(skipped_ques)}'))
    lets_answer_many_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
    lets_answer_many_markup = give_help(message, user_question, subject, lets_answer_many_markup, givinghelp, admin)
    ques_len = len(f'{question}\n{action}')
    if action == '–í–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:':
        if img_link==None:
            bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
        else:
            bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
    elif action == '–ü–æ–∑–Ω–∞—á—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:':
        right_answer = right_answer.replace(";", "")
        for row in right_answer:
            if row.isdigit():
                right_answer = right_answer.replace(row, "")
        radio_answer_markup = types.InlineKeyboardMarkup(row_width=2)
        if len(right_answer)==1:
            for row in answers_list:
                if row==right_answer:
                    cbdata = f'right-{subject}-{right_answer}{check_skipped(skipped_ques)}'
                else:
                    cbdata = f'wrong-{subject}-{right_answer}{check_skipped(skipped_ques)}'
                radio_answer_markup.add(types.InlineKeyboardButton(row, callback_data=cbdata))
            if answers_list==[]:
                radio_answer_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-one-{subject}-{right_answer.replace(";", "").upper()}{check_skipped(skipped_ques)}'))
            radio_answer_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
            radio_answer_markup = give_help(message, user_question, subject, radio_answer_markup, givinghelp, admin)
            if img_link==None:
                bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, radio_answer_markup, question, action), parse_mode='html', reply_markup=radio_answer_markup)
            else:
                bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, radio_answer_markup, question, action), parse_mode='html', reply_markup=radio_answer_markup)
        else:
            lets_answer_markup = types.InlineKeyboardMarkup()
            lets_answer_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-one-{subject}-{right_answer.replace(";", "").upper()}{check_skipped(skipped_ques)}'))
            lets_answer_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
            radio_answer_markup = None
            lets_answer_markup = give_help(message, user_question, subject, lets_answer_markup, givinghelp, admin)
            if img_link==None:
                bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
            else:
                bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
    elif action == '–í–ø–∏—à—ñ—Ç—å —Ü–∏—Ñ—Ä–∏:':
        right_answer = right_answer.replace(";", "")
        if img_link==None:
            bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, lets_answer_many_markup, question, action), parse_mode='html', reply_markup=lets_answer_many_markup)
        else:
            bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, lets_answer_many_markup, question, action), parse_mode='html', reply_markup=lets_answer_many_markup)
    if answers_images!=[]:
        for i in range(len(answers_images)):
            try:
                bot.send_photo(message.chat.id, answers_images[i], caption=answers_list[i], parse_mode='html')
            except IndexError:
                pass
    if givinghelp != None:
        bot.send_message(message.chat.id, f'–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer.upper()}</b>', parse_mode='html')
def html_fix(added_items):
    added_item=''
    for row in added_items:
        added_item=added_item+str(row)
    added_item = added_item.replace("<sup>", "")
    added_item = added_item.replace("</sup>", "")
    added_item = added_item.replace("<sub>", "")
    added_item = added_item.replace("</sub>", "")
    added_item = added_item.replace("<small>", "")
    added_item = added_item.replace("</small>", "")
    added_item = added_item.replace("<ins>", "")
    added_item = added_item.replace("</ins>", "")
    added_item = added_item.replace("<br>", "\n")
    added_item = added_item.replace("</br>", "\n")
    added_item = added_item.replace("br>", "\n")
    added_item = added_item.replace("<br\>", "\n")
    added_item = added_item.replace("</br", "\n")
    added_item = added_item.replace("br", "\n")
    added_item = added_item.replace("<p>", "")
    added_item = added_item.replace("</p>", "")
    return added_item

def give_help(message, user_question, subject, reply, givinghelp=None, admin=None):
    if givinghelp is None:
        return reply
    if admin == True:
        return None
    give_help_reply=types.InlineKeyboardMarkup(row_width=2)
    give_help_reply.add(types.InlineKeyboardButton("‚úÖ –ù–∞–¥–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ", callback_data=f"returnhelp-{subject}-{user_question}"))
    give_help_reply.add(types.InlineKeyboardButton("‚ùå –ù–µ –∑–Ω–∞—é, —è–∫ –¥–æ–ø–æ–º–æ–≥—Ç–∏", callback_data=f"canthelp"))
    return give_help_reply
def send_parts(message, ques_len, img_link, reply_markup, question, action):
    if img_link==None:
        if ques_len>=4086:
            bot.send_message(message.chat.id, html_fix(f'{question[:round((ques_len)/2)]}...'), parse_mode='html')
            return html_fix(f'...{question[ques_len-round((ques_len)/2):]}\n{action}')
        else:
            return html_fix(f'{question}\n{action}')
    else:
        if ques_len>=4086:
            bot.send_photo(message.chat.id, img_link, caption=html_fix(f'{question[:round((ques_len)/2)]}'), parse_mode='html')
            return html_fix(f'...{question[ques_len-round((ques_len)/2):]}\n{action}')
        else:
            return html_fix(f'{question}\n{action}')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        if 'start-' in call.data:
            user_id = call.data.replace('start-', '')
            statuses = ['creator', 'administrator', 'member']
            channel_id = -1001325930135
            permit = False
            for status in statuses:
                if status.lower() == bot.get_chat_member(chat_id=channel_id, user_id=user_id).status.lower():
                    permit = True
                    break
            if permit is False:
                msg = f"‚ùå –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏—â–µ. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start —â–µ —Ä–∞–∑."
                bot.send_message(call.message.chat.id, msg, parse_mode='html')
                return
            msg=f'‚úÖ –ì–∞—Ä–∞–∑–¥. –ß–∞—Å —Ä–æ–∑–ø–æ—á–∏–Ω–∞—Ç–∏! –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —Ç–µ—Å—Ç–∏ –∑ —è–∫–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–π—Ç–∏. –í–∏ —Ç–∞–∫–æ–∂ –∑–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç, —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ—é /changesub.'
            bot.send_message(call.message.chat.id, msg, reply_markup=subjects_reply)
            #sending_new(call.message)
        elif 'new_abitcheck' == call.data:
            take_abiturl(call.message, URL=None)
            bot.delete_message(call.message.chat.id, call.message.message_id)
        elif 'abitcheck-' in call.data:
            take_abiturl(call.message, URL = call.data.replace('abitcheck-', ''))
            bot.delete_message(call.message.chat.id, call.message.message_id)
        elif 'returnhelp-' in call.data:
            #returnhelp-{subject}-{user_question}_{message.chat.id}
            print(call.data)
            fixed_data = call.data.replace('returnhelp-', '')
            subject = fixed_data[:fixed_data.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
            ques_num = fixed_data.replace(subject, '')
            ques_num = int(ques_num[1:])
            helper_chatid = call.message.chat.id
            do_help = bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∏–∂—á–µ.')
            bot.register_next_step_handler(do_help, sending_help, subject, ques_num, helper_chatid)
        elif 'canthelp' in call.data:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        elif 'givehelp-' in call.data:
            print(call.data)
            fixed_data = call.data.replace('givehelp-', '')
            subject = fixed_data[:fixed_data.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
            ques_num = fixed_data.replace(subject, '')
            ques_num = int(ques_num[1:])
            checking_ques(call.message, skipped_ques=None, subject=subject, givinghelp=ques_num)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            return
        elif 'anicehelp-' in call.data or 'awarn' in call.data or 'aban' in call.data:
            print(call.data)
            action = call.data[:call.data.index('-')]
            fixed_data = call.data.replace(action+'-', '')
            subject = fixed_data[:fixed_data.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                print(fixed_data)
            ques_num = fixed_data.replace(subject, '')
            ques_num = ques_num[1:ques_num.index('_')]
            helper_chatid = fixed_data[fixed_data.index('_')+1:fixed_data.index('#')]
            warner_chatid = fixed_data[fixed_data.index('#')+1:]
            sql.execute(f"SELECT * FROM helps WHERE chatid = '{warner_chatid}' AND subject = '{subject}' and curques = {ques_num}")
            res = sql.fetchone()
            if res is None:
                return bot.delete_message(call.message.chat.id, call.message.message_id)
            if action == 'anicehelp':
                sql.execute(f"SELECT * FROM helps WHERE subject = '{subject}' AND curques = {ques_num}")
                res=sql.fetchone()
                if res is None:
                    return bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ –Ω–∞–¥–∞–Ω–æ.")
                sql.execute(f"UPDATE helpers SET amount = amount + {1} WHERE chatid = '{helper_chatid}' AND subject = '{subject}'")
                db.commit()
                helper_msg = f"‚úÖ –í–∞—à–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: <b>{sub_to_right(subject)} #{ques_num}</b> –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ."
                warner_msg = f"üëã –í–∞—à –∑–∞–ø–∏—Ç –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —Å—Ç–æ—Å–æ–≤–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è: <b>{sub_to_right(subject)} #{ques_num}</b> —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏—Ä—ñ—à–∏–ª–∞ –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ü—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—É. –ü–∏—Ç–∞–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ –¥–ª—è —ñ–Ω—à–∏—Ö."
                sql.execute(f"DELETE FROM helps WHERE subject = '{subject}' AND curques = {ques_num}")
                db.commit()
            elif action == 'awarn':
                helper_msg = f"‚ö†Ô∏è –í–∞—à–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: <b>{sub_to_right(subject)} #{ques_num}</b> –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω–Ω—é –∞–±–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –Ø–∫—â–æ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –±—É–¥—É—Ç—å —Å—Ç–æ—Å—É–≤–∞—Ç–∏—Å—è —Ç–µ–º–∏, –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π."
                warner_msg = f"üëã –í–∞—à –∑–∞–ø–∏—Ç –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —Å—Ç–æ—Å–æ–≤–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è: <b>{sub_to_right(subject)} #{ques_num}</b> —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏—Ä—ñ—à–∏–ª–∞ –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É. –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∏–º –¥–ª—è —ñ–Ω—à–∏—Ö."
            elif action == 'aban':
                helper_msg = f"üõë –í–∞—à–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: <b>{sub_to_right(subject)} #{ques_num}</b> –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω–Ω—é –∞–±–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –î–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∞—Å. –Ø–∫—â–æ –≤–∏ –ø–æ–±–∞—á–∏–ª–∏ –ø–æ–º–∏–ª–∫—É, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É/–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                warner_msg = f"üëã –í–∞—à –∑–∞–ø–∏—Ç –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —Å—Ç–æ—Å–æ–≤–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è: <b>{sub_to_right(subject)} #{ques_num}</b> —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏—Ä—ñ—à–∏–ª–∞ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –î—è–∫—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–∏–ª–∏ –ø—Ä–æ —Ü–µ –Ω–∞–º! –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∏–º –¥–ª—è —ñ–Ω—à–∏—Ö."
                sql.execute(f"UPDATE helpers SET status = 'banned' WHERE chatid = '{helper_chatid}' AND subject = '{subject}'")
                db.commit()
            bot.send_message(helper_chatid, helper_msg, parse_mode='html')
            bot.send_message(warner_chatid, warner_msg, parse_mode='html')
            return bot.send_message(call.message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –ø—Ä–∞—Ü—é! –ê–¥—Ä–µ—Å–∞—Ç–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        elif 'nicehelp-' in call.data or 'notnicehelp-' in call.data or 'badhelp' in call.data:
            #nicehelp-{subject}-{ques_num}_{helper_chatid}
            action = call.data[:call.data.index('-')]
            fixed_data = call.data.replace(action+'-', '')
            subject = fixed_data[:fixed_data.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
            ques_num = fixed_data.replace(subject, '')
            ques_num = ques_num[1:ques_num.index('_')]
            helper_chatid = fixed_data[fixed_data.index('_')+1:]
            sql.execute(f"SELECT * FROM helps WHERE subject = '{subject}' AND curques = {ques_num} AND chatid = '{call.message.chat.id}'")
            check_ques_visibility=sql.fetchone()
            if check_ques_visibility is None:
                bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
            sql.execute(f"SELECT * FROM helpers WHERE chatid = '{helper_chatid}' AND subject = '{subject}'")
            res = sql.fetchone()
            if res is None:
                sql.execute("INSERT INTO helpers VALUES (%s, %s, %s, %s)", (helper_chatid, subject, 0, 'unbanned'))
                db.commit()
            if action == 'nicehelp':
                if check_ques_visibility is None:
                    return
                sql.execute(f"UPDATE helpers SET amount = amount + {1} WHERE chatid = '{helper_chatid}' AND subject = '{subject}'")
                db.commit()
                bot.send_message(helper_chatid, f"üëã –í–∞—à–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è: <b>{sub_to_right(subject)} - #{ques_num}</b> –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ, —è–∫ –∑–∞–¥–æ–≤—ñ–ª—å–Ω–µ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.", parse_mode='html')
                sql.execute(f"DELETE FROM helps WHERE subject = '{subject}' AND curques = {ques_num} AND chatid = '{call.message.chat.id}'")
                db.commit()
            elif action == 'notnicehelp' or 'badhelp':
                if action == 'notnicehelp':
                    argument = '‚ö†Ô∏è –ù–µ–º–∞—î/–Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è'
                elif action == 'badhelp':
                    argument = "‚ùå –¢–µ–∫—Å—Ç –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∏–π —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º"
                sql.execute(f"SELECT chatid FROM admins")
                rows = sql.fetchall()
                true_msg = call.message.text[call.message.text.index(')')+1:call.message.text.index('\n\n–í–∏')]
                msg = f'<b>–ó–∞–ø–∏—Ç</b>\n<b>–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> {helper_chatid}\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {argument}\n\n<b>–¢–µ–∫—Å—Ç –ø–æ—è—Å–Ω–µ–Ω–Ω—è:</b>\n{true_msg}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É.'
                admin_reply = types.InlineKeyboardMarkup(row_width=2)
                admin_reply.add(types.InlineKeyboardButton(f'‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥–∞–Ω–æ –≤—ñ—Ä–Ω–æ (–∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ —ó—ó)', callback_data=f'anicehelp-{subject}-{ques_num}_{helper_chatid}#{call.message.chat.id}'))
                admin_reply.add(types.InlineKeyboardButton(f'‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è', callback_data=f'awarn-{subject}-{ques_num}_{helper_chatid}#{call.message.chat.id}'))
                admin_reply.add(types.InlineKeyboardButton(f'üõë –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ', callback_data=f'aban-{subject}-{ques_num}_{helper_chatid}#{call.message.chat.id}'))
                for row in rows:
                    am = bot.send_message(row[0], msg, parse_mode='html', reply_markup=admin_reply)
                    checking_ques(am, skipped_ques=None, subject=subject, givinghelp=int(ques_num), admin=True)
            bot.send_message(call.message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫ üòâ")
        elif 'help-' in call.data:
            print(call.data)
            fixed_data = call.data.replace('help-', '')
            subject = fixed_data[:fixed_data.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
            ques_num = fixed_data.replace(subject, '')
            ques_num = ques_num[1:]
            sql.execute("INSERT INTO helps VALUES (%s, %s, %s)", (call.message.chat.id, subject, ques_num))
            db.commit()
            bot.send_message(call.message.chat.id, "‚úÖ –ì–∞—Ä–∞–∑–¥! –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ó–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        elif 'globalstatistics-' in call.data:
            subject = call.data.replace('globalstatistics-', '')
            global_statistics_reply=types.InlineKeyboardMarkup(row_width=2)
            for row in subjects_dict:
                global_statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'globalstatistics-{row}'))
            global_statistics_reply.add(types.InlineKeyboardButton("‚ùå", callback_data='delmsg'))
            try:
                bot.edit_message_text(text=get_global_statistics(call.message, subject, call), chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=global_statistics_reply, parse_mode='html')
            except:
                pass
        elif 'statistics-' in call.data:
            subject = call.data.replace('statistics-', '')
            statistics_reply=types.InlineKeyboardMarkup(row_width=2)
            for row in subjects_dict:
                statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'statistics-{row}'))
            statistics_reply.add(types.InlineKeyboardButton("‚ùå", callback_data='delmsg'))
            try:
                bot.edit_message_text(text=get_statistics(call.message, subject, call), chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=statistics_reply, parse_mode='html')
            except:
                pass
        elif 'change-' in call.data:
            subject = call.data.replace('change-', '')
            change_sub(call.message, subject)
        elif 'answer-many-' in call.data:
            right_answer=call.data.replace('answer-many-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            get_answer = bot.send_message(call.message.chat.id, "–Ø–∫–∞ –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å? –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –º–æ–∂–Ω–∞ –Ω–∞–¥–∞—Ç–∏ —É –±—É–¥—å-—è–∫—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ.")
            bot.register_next_step_handler(get_answer, sending_many_answer, right_answer, subject, skipped_ques)
        elif 'answer-one-' in call.data:
            right_answer=call.data.replace('answer-one-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            get_answer = bot.send_message(call.message.chat.id, "–Ø–∫–∞ –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å?")
            bot.register_next_step_handler(get_answer, sending_answer, right_answer, subject, skipped_ques)
        elif 'wrong-' in call.data:
            right_answer = call.data.replace('wrong-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1}, curques = curques + {1} WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(call.message.chat.id, f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html', reply_markup=get_help_ques(call.message, skipped_ques, subject))
            upd_skipped(call.message, skipped_ques, subject)
            #download_thread = threading.Thread(target=upd_skipped, args=(call.message, skipped_ques, subject,))
            #start_clock(call.message, download_thread)
        elif 'right-' in call.data:
            right_answer = call.data.replace('right-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1}, curques = curques + {1} WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(call.message.chat.id, f"‚úÖ –í—ñ—Ç–∞—é, –≤–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html')
            #download_thread = threading.Thread(target=upd_skipped, args=(call.message, skipped_ques, subject,))
            #start_clock(call.message, download_thread)
            upd_skipped(call.message, skipped_ques, subject)
        elif 'skip-' in call.data:
            right_answer = call.data.replace('skip-', '', 1)
            subject = right_answer[:right_answer.index('-')]
            right_answer = right_answer[right_answer.index('-')+1:]
            if call.message.text is None:
                msg = call.message.caption
            else:
                msg = call.message.text
            ques_num=msg.replace('–ó–∞–≤–¥–∞–Ω–Ω—è #', '')[:msg.replace('–ó–∞–≤–¥–∞–Ω–Ω—è #', '').index('\n')]
            sql.execute(f"SELECT subject FROM skipped WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}' AND curques = {ques_num}")
            res=sql.fetchone()
            if res is None:
                sql.execute("INSERT INTO skipped VALUES (%s, %s, %s)", (call.message.chat.id, subject, ques_num))
                db.commit()
                sql.execute(f"UPDATE subjects SET skipped_answers = skipped_answers + {1}, curques = curques + {1} WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}'")
                db.commit()
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, f"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –Ω—å–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skipped.", parse_mode='html')
                sending_new(call.message)
                return
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –Ω—å–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skipped.", parse_mode='html')
        elif call.data == 'delme':
            sql.execute(f"DELETE FROM users WHERE chatid = '{call.message.chat.id}'")
            db.commit()
            sql.execute(f"DELETE FROM subjects WHERE chatid = '{call.message.chat.id}'")
            db.commit()
            sql.execute(f"DELETE FROM skipped WHERE chatid = '{call.message.chat.id}'")
            db.commit()
            sql.execute(f"DELETE FROM helps WHERE chatid = '{call.message.chat.id}'")
            db.commit()
            sql.execute(f"DELETE FROM helpers WHERE chatid = '{call.message.chat.id}'")
            db.commit()
            sql.execute(f"DELETE FROM abits WHERE chatid = '{call.message.chat.id}'")
            db.commit()
            sql.execute(f"DELETE FROM abits_checks WHERE chatid = '{call.message.chat.id}'")
            db.commit()
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f'‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π. –£—Å–ø—ñ—Ö—ñ–≤!')
        elif call.data == 'nodelme':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, '‚úÖ –î–æ–±—Ä–µ, –∫–æ–ª–∏ –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Ü–µ, –∑–Ω–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deleteme')
        elif call.data == 'delmsg':
            bot.delete_message(call.message.chat.id, call.message.message_id)
def sending_help(message, subject, ques_num, helper_chatid):
    if message.text=='/cancel':
        return bot.send_message(message.chat.id, f'‚úÖ –î–æ–±—Ä–µ! –Ø–∫ —Ç—ñ–ª—å–∫–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∑–Ω–æ–≤—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tohelp.')
    helpmsg = message.text
    if helpmsg[-1] != '.':
        helpmsg = helpmsg+'.'
    quality_reply=types.InlineKeyboardMarkup(row_width=2)
    quality_reply.add(types.InlineKeyboardButton('‚úÖ –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î –º–µ–Ω–µ', callback_data=f'nicehelp-{subject}-{ques_num}_{helper_chatid}'))
    quality_reply.add(types.InlineKeyboardButton('‚ö†Ô∏è –ù–µ–º–∞—î/–Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è', callback_data=f'notnicehelp-{subject}-{ques_num}_{helper_chatid}'))
    quality_reply.add(types.InlineKeyboardButton("‚ùå –¢–µ–∫—Å—Ç –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∏–π —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º", callback_data=f'badhelp-{subject}-{ques_num}_{helper_chatid}'))
    sql.execute(f"SELECT * FROM helps WHERE subject = '{subject}' AND curques = {ques_num}")
    rows = sql.fetchall()
    for row in rows:
        ban_counter=len(rows)
        try:
            ban_counter -= 1
        except:
            sql.execute(f"DELETE FROM helps WHERE chatid = '{row[0]}' AND subject = '{subject}' AND curques = '{ques_num}'")
            db.commit()
        if ban_counter>0:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –Ω–µ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –Ω–∞–¥—ñ–π—à–ª–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è ({ban_counter}/{len(rows)}), –∞–¥–∂–µ –¥–æ—Å—Ç—É–ø –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –±–æ—Ç–∞ –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
            return
        else:
            bot.send_message(row[0], f'<b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è ({sub_to_right(subject)} - –∑–∞–≤–¥–∞–Ω–Ω—è #{ques_num}</b>)\n<i>{helpmsg}</i>\n\n–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ü—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∏–∂—á–µ. –ó–∞–ø–∏—Ç–∏ —Ä–æ–∑–≥–ª—è–¥–∞—é—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: –≤–∏ –¥—ñ–∑–Ω–∞—î—Ç–µ—Å—å –ø—Ä–æ —Ä—ñ—à–µ–Ω–Ω—è —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.', parse_mode='html', reply_markup=quality_reply)
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ó–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
def sending_answer(message, right_answer, subject, skipped_ques=None):
    if message.text=='/cancel':
        return bot.send_message(message.chat.id, f'‚úÖ –î–æ–±—Ä–µ! –Ø–∫ —Ç—ñ–ª—å–∫–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.')
    if message.text.isdigit()==False:
        right_counter=0
        if fix_answer(message.text) is None:
            return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ –ê-–î –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —â–µ —Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /resetquestion.")
        for i in range(len(right_answer)):
            try:
                if fix_answer(message.text)[i] == right_answer[i] and subject.lower()!='english':
                    sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
                    db.commit()
                    right_counter+=1
                elif message.text[i] == right_answer[i] and subject.lower()=='english':
                    sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
                    db.commit()
                    right_counter+=1
                else:
                    sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
                    db.commit()
            except IndexError:
                pass
        reply_markup = get_help_ques(message, skipped_ques, subject)
        if right_counter==len(right_answer):
            msg = f"‚úÖ –í—ñ—Ç–∞—é, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (<b>{right_answer}</b>) –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∞–≤–∏–ª—å–Ω–∞."
            reply_markup=None
        elif right_counter==0:
            msg = f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>."
        else:
            msg = f"‚úÖ‚ùå –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.\n–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: <b>{right_counter}</b>."
        sql.execute(f"UPDATE subjects SET curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
        db.commit()
        bot.send_message(message.chat.id, msg, parse_mode='html', reply_markup=reply_markup)
        #upd_skipped(message, skipped_ques, subject)
    elif message.text.isdigit()==True:
        if message.text.upper() == right_answer:
            sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(message.chat.id, f"‚úÖ –í—ñ—Ç–∞—é, –≤–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html')
            #upd_skipped(message, skipped_ques, subject)

        else:
            sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(message.chat.id, f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html')
            #upd_skipped(message, skipped_ques, subject)
    download_thread = threading.Thread(target=upd_skipped, args=(message, skipped_ques, subject,))
    start_clock(message, download_thread)
    

def sending_many_answer(message, right_answer, subject, skipped_ques=None):
    if message.text=='/cancel':
        return bot.send_message(message.chat.id, f'‚úÖ –î–æ–±—Ä–µ! –Ø–∫ —Ç—ñ–ª—å–∫–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.')
    user_answer = fix_answer(message.text)
    if user_answer is None:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ –ê-–î –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —â–µ —Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /resetquestion.")
    if subject.lower()=='english':
        user_answer=message.text
    msg_right_answer = ''
    for arow in right_answer:
        msg_right_answer=f'{msg_right_answer}{arow};'
    for row in right_answer:
        if row not in user_answer:
            sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(message.chat.id, f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{msg_right_answer}</b>.", parse_mode='html', reply_markup=get_help_ques(message, skipped_ques, subject))
            return
    sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    db.commit()
    bot.send_message(message.chat.id, f"‚úÖ –í—ñ—Ç–∞—é, –≤–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{msg_right_answer}</b>.", parse_mode='html')
    #upd_skipped(message, skipped_ques, subject)
    download_thread = threading.Thread(target=upd_skipped, args=(message, skipped_ques, subject,))
    start_clock(message, download_thread)


def sending_new(message):
    time.sleep(5)
    checking_ques(message)

def change_sub(message, subject):
    msg = f'–í–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç <b>{subjects_dict[subject]}</b> –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.'
    bot.edit_message_text(msg, chat_id=message.chat.id, message_id=message.message_id, parse_mode='html', reply_markup=None)
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    user=sql.fetchone()
    if user is None:
        sql.execute("INSERT INTO users VALUES (%s, %s)", (message.chat.id, subject))
        db.commit()
    else:
        sql.execute(f"UPDATE users SET cursub = '{subject}' WHERE chatid = '{message.chat.id}'")
        db.commit()
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    user_subjects=sql.fetchone()
    if user_subjects is None:
        sql.execute("INSERT INTO subjects VALUES (%s, %s, %s, %s, %s, %s)", (message.chat.id, subject, 0, 0, 0, 1))
        db.commit()
    checking_ques(message)


def subjects_keyboard():
    #subjects_dict={'geography':'–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è', 'ukrainian':'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'mathematics':'–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'}
    global subjects_reply
    subjects_reply=types.InlineKeyboardMarkup(row_width=2)
    for row in subjects_dict:
        subjects_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'change-{row}'))
    subjects_reply.add(types.InlineKeyboardButton("‚ùå", callback_data='delmsg'))
subjects_keyboard()


def sub_to_right(subject):
   if subject in subjects_dict:
        return subjects_dict[subject]
    
def fix_answer(answer):
    true_answer_list = {"a": "–∞", "b": "–±", "c": "–≤", "d":"–≥", "e":"–¥", 'f':'f', 'g':'g', 'h':'h'}
    answer = answer.lower()
    for row in answer:
        if row not in true_answer_list and row not in true_answer_list.values():
            return None
    for row in true_answer_list:
        if row in answer.lower():
            answer = answer.replace(row, true_answer_list[row])
    answer=answer.upper()
    return answer


def check_skipped(skipped_ques):
    if skipped_ques is None:
        return ''
    else:
        return f'_{skipped_ques}'

def callback_check_skipped(right_answer):
    if '_' in right_answer:
        skipped_ques=right_answer[right_answer.index('_')+1:]
        right_answer=right_answer.replace(f'_{skipped_ques}', '')
    else:
        skipped_ques=None
    return right_answer, skipped_ques

def upd_skipped(message, skipped_ques, subject):
    if skipped_ques==None:
        return sending_new(message)
    sql.execute(f"DELETE FROM skipped WHERE chatid = '{message.chat.id}' AND curques = {skipped_ques} AND subject = '{subject}'")
    db.commit()
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}' AND curques = {int(skipped_ques)-1}")
    if sql.fetchone() is None:
        sql.execute(f"UPDATE subjects SET skipped_answers = skipped_answers - {1}, curques = curques - {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
        db.commit()
    else:
        sql.execute(f"UPDATE subjects SET skipped_answers = skipped_answers - {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
        db.commit()

def get_help_ques(message, skipped_ques, subject):
    get_help_reply = types.InlineKeyboardMarkup(row_width=2)
    if skipped_ques==None:
        sql.execute(f"SELECT curques FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
        res = sql.fetchone()
        get_help_reply.add(types.InlineKeyboardButton('‚ö†Ô∏è –ß–æ–º—É —Å–∞–º–µ —Ç–∞–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å?', callback_data=f'help-{subject}-{int(res[0]-1)}'))
    else:
        get_help_reply.add(types.InlineKeyboardButton('‚ö†Ô∏è –ß–æ–º—É —Å–∞–º–µ —Ç–∞–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å?', callback_data=f'help-{subject}-{skipped_ques}'))
    return get_help_reply


    

bot.polling(none_stop=True)