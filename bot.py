# -*- coding: utf8 -*-
import telebot
from telebot import types
import config
import psycopg2
import requests
from bs4 import BeautifulSoup
import lxml
import time
global db
global sql
global subjects_dict
subjects_dict={'biology':'–ë—ñ–æ–ª–æ–≥—ñ—è','geography':'–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è', 'ukrainian':'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'mathematics':'–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'ukraine-history': '–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏'}
db = psycopg2.connect(database='d7vu070ofr61cg', user='ekelorsfyfauek', port="5432", password='f99c8f6fd63dec2d3913c7daef4095819205f44c0d4e19c1ecb63ad495e9b960', host='ec2-54-243-92-68.compute-1.amazonaws.com', sslmode='require')
sql=db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS users (chatid TEXT, cursub TEXT)""")
db.commit()
#right_answers INT, wrong_answers INT, skipped_answers INT,
sql.execute("""CREATE TABLE IF NOT EXISTS subjects (chatid TEXT, subject TEXT, right_answers INT, wrong_answers INT, skipped_answers INT, curques INT)""")
db.commit()
sql.execute("""CREATE TABLE IF NOT EXISTS skipped (chatid TEXT, subject TEXT, curques INT)""")
db.commit()
#sql.execute(f"DELETE FROM subjects WHERE subject = 'biology'")
#db.commit()




def last_ques_check(subject):
    headers = {"user-agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"}
    req = requests.get(f'https://zno.osvita.ua/{subject}/list.html', headers=headers)
    soup = BeautifulSoup(req.content, "html.parser")
    amount_ques = soup.find("div", class_="task-card current").find("div").get_text(strip=True)
    amount_ques = int(amount_ques[len(amount_ques)-4:])
    return amount_ques


bot=telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def welcome(message):
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res is None:
        msg = '–í—ñ—Ç–∞—é! –î—è–∫—É—é, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–ª–∏—Ö –∑–∞–≤–¥–∞–Ω—å —ñ–∑ –ó–ù–û –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @znotasks_bot. –£—Å—ñ —Ç–µ—Å—Ç–∏ –∑—ñ–±—Ä–∞–Ω—ñ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ —Å–∞–π—Ç—É –æ—Å–≤—ñ—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏ zno.osvita.ua.\n\n–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–∞–º –±—É–¥–µ –Ω–∞–¥–∞–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.\n\n–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–Ω–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏". –¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç—É, –ø–æ–∫–∏ –≤–∏ –Ω–µ –∑–∞—Å—Ç–æ—Å—É—î—Ç–µ –∫–æ–º–∞–Ω–¥—É /skipped —Ç–∞ –Ω–µ –¥–∞—Å—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω—å–æ–≥–æ.\n\n–£ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /resetquestion.\n\n–í–∏ –º–æ–∂–µ—Ç–µ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /stats —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ - /globalstats.\n\n<b>–£–≤–∞–≥–∞!</b> –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–∞–º —Ç–∞ –Ω–µ –Ω–∞–¥–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç—É.\n\n'
        bot.send_message(message.chat.id, msg, parse_mode='html')
        time.sleep(5)
        start_reply = types.InlineKeyboardMarkup(row_width=2)
        start_reply.add(types.InlineKeyboardButton('‚úÖ –ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–∏–π(–∞)', callback_data='start'))
        msg = '–Ø–∫—â–æ –≤–∏ –ø–æ–±–∞—á–∏–ª–∏ –ø–æ–º–∏–ª–∫—É –≤ –ø–µ–≤–Ω–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É (–¥–∏–≤—ñ—Ç—å—Å—è –æ–ø–∏—Å –¥–æ —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É).\n\n–Ü—Å–Ω—É—é—Ç—å —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å.\n\n–Ø–∫—â–æ –≤–∞–º –ø—Ä–æ–ø–æ–Ω—É—î—Ç—å—Å—è –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ê-–î, –≤–∞–º –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.\n\n–£ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ —Ü–∏—Ñ—Ä–∞–º–∏ —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ª—ñ—Ç–µ—Ä–∞–º–∏), –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è" —ñ –Ω–∞–ø–∏—à—ñ—Ç—å –ª—ñ—Ç–µ—Ä–∏ (—Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ) —É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º: –≥–≤–±–∞ –∞–±–æ –ì–í–ë–ê (–±–æ—Ç —Ä–æ–∑—Ü—ñ–Ω—é—î —Ü–µ —è–∫ 1 - –ì, 2 - –í, 3 - –ë, 4 - –ê —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–∂–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –æ–∫—Ä–µ–º–æ).\n\n–Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ —ñ–∑ –ø–µ—Ä–µ–ª—ñ–∫—É, –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –≤ –±—É–¥—å-—è–∫—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ.\n\n–û–∑–Ω–∞–π–æ–º–∏–≤—à–∏—Å—å –∑ —É—Å—ñ—î—é –≤–∏—â–µ –∑–∞–∑–Ω–∞—á–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–æ—á–∞—Ç–∫—É.'
        bot.send_message(message.chat.id, msg, reply_markup=start_reply, parse_mode='html')
    else:
        checking_ques(message)

@bot.message_handler(commands=['send'])
def login(message):
    if message.from_user.username=='jerwright':
        do_send=bot.send_message(message.from_user.id, "–ß—Ç–æ –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?")
        bot.register_next_step_handler(do_send, sending)
    else:
        return time.sleep(0.5)


def sending(message):
    if message.text=='/cancel':
        return bot.reply_to(message, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    mes=message.text
    sql.execute("SELECT chatid FROM users")
    rows = sql.fetchall()
    for row in rows:
        try:
            bot.send_message(row[0], mes, parse_mode='html')
        except:
            pass
    time.sleep(0.5)

@bot.message_handler(commands=['changesub'])
def changing_sub(message):
    mes = f'–ì–∞—Ä–∞–∑–¥! –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.'
    bot.send_message(message.chat.id, mes, parse_mode='html', reply_markup=subjects_reply)

@bot.message_handler(commands=['skipped'])
def skipped_questions(message):
    sql.execute(f"SELECT * FROM skipped WHERE chatid = '{message.chat.id}'")
    try:
        res = sql.fetchone()
    except:
        return bot.reply_to(message,'‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.')
    if res is None:
        return bot.reply_to(message, f'‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.')
    sql.execute(f"SELECT * FROM skipped WHERE chatid= '{message.chat.id}' ORDER by curques")
    rows = sql.fetchall()
    for row in rows:
        checking_ques(message, skipped_ques=row[2], subject=row[1])


@bot.message_handler(commands=['resetquestion'])
def reseting(message):
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res!=None:
        checking_ques(message)
    else:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É")

@bot.message_handler(commands=['stats'])
def statistics(message):
    sql.execute(f"SELECT cursub FROM users WHERE chatid = '{message.chat.id}'")
    subject = sql.fetchone()
    if subject is None:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
    statistics_reply=types.InlineKeyboardMarkup(row_width=2)
    for row in subjects_dict:
        statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'statistics-{row}'))
    bot.send_message(message.chat.id, get_statistics(message, subject[0]), parse_mode='html', reply_markup=statistics_reply)

def get_statistics(message, subject, call=None):
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res=sql.fetchone()
    if res!=None:
        msg = f'üìà –í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ üìà\n\n'
        try:
            msg = f'{msg}<b>{sub_to_right(res[1])}</b>\n–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[2]}</b>\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[3]}</b>\nüí® –ü—Ä–æ–ø—É—â–µ–Ω–∏—Ö - <b>{res[4]}</b>\n\nüéØ –¢–æ—á–Ω—ñ—Å—Ç—å: <b>{round(int(res[2])*100/(int(res[2])+int(res[3])+int(res[4])), 2)}%</b>\n\n–ó–∞—Ä–∞–∑ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—ñ: <b>{res[5]}/{last_ques_check(res[1])}</b>\n\n'
        except ZeroDivisionError:
            msg = f'{msg}<b>{sub_to_right(res[1])}</b>\n–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[2]}</b>\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{res[3]}</b>\nüí® –ü—Ä–æ–ø—É—â–µ–Ω–∏—Ö - <b>{res[4]}</b>\n\nüéØ –¢–æ—á–Ω—ñ—Å—Ç—å: –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—ñ\n\n–ó–∞—Ä–∞–∑ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—ñ: <b>{res[5]}/{last_ques_check(res[1])}</b>\n\n'
        return msg
    else:
        return bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

@bot.message_handler(commands=['globalstats'])
def global_statistics(message):
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}'")
    res=sql.fetchone()
    if res is None:
        return bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /changesub —Ç–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.")
    sql.execute(f"SELECT cursub FROM users WHERE chatid = '{message.chat.id}'")
    subject = sql.fetchone()
    global_statistics_reply=types.InlineKeyboardMarkup(row_width=2)
    for row in subjects_dict:
        global_statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'globalstatistics-{row}'))
    bot.send_message(message.chat.id, get_global_statistics(message, subject[0]), parse_mode='html', reply_markup=global_statistics_reply)

def get_global_statistics(message, subject, call=None):
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res=sql.fetchone()
    if res is None:
        return bot.reply_to(message, "‚ö†Ô∏è –í–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç–∏ –∑ —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É.")

    #sql.execute(f"SELECT * FROM users")
    #users_number = len(sql.fetchall())

    msg=''
    sql.execute(f"SELECT right_answers, wrong_answers, skipped_answers FROM subjects WHERE subject = '{subject}'")
    rows=sql.fetchall()
    if rows == []:
        return bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    users_number = len(rows)
    global_right_answers=0
    global_wrong_answers=0
    global_skipped_answers=0
    for row in rows:
        global_right_answers+=row[0]
        global_wrong_answers+=row[1]
        global_skipped_answers+=row[2]
    try:
        global_right_percents = round((int(res[2])*100)/global_right_answers, 2)
    except ZeroDivisionError: 
        global_right_percents=0.0
    try:
        global_wrong_percents = round((int(res[3])*100)/global_wrong_answers, 2)
    except ZeroDivisionError: 
        global_wrong_percents=0.0
    try:
        global_skipped_percents = round((int(res[4])*100)/global_skipped_answers, 2)
    except ZeroDivisionError: 
        global_skipped_percents=0.0
    try:
        accuracy = str(round(int(global_right_answers)*100/(int(global_right_answers)+int(global_wrong_answers)+int(global_skipped_answers)), 2))+'%'
    except ZeroDivisionError: 
        accuracy='–ø–æ–∫–∏ —â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏'
    msg = f'{msg}<b>{subjects_dict[subject]}</b>\nüåê –£—Å—å–æ–≥–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤: <b>{users_number}</b>\n\n–ó–∞–≥–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{global_right_answers}</b> (<b>{global_right_percents}%</b> –≤–∞—à–∏—Ö)\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö - <b>{global_wrong_answers}</b> (<b>{global_wrong_percents}%</b> –≤–∞—à–∏—Ö)\nüí® –ü—Ä–æ–ø—É—â–µ–Ω–∏—Ö - <b>{global_skipped_answers}</b> (<b>{global_skipped_percents}%</b> –≤–∞—à–∏—Ö)\n\nüéØ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å: <b>{accuracy}</b>\n\n'
    msg = f'üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ üìà\n\n{msg}'
    return msg


#@bot.message_handler(commands=['others'])
#def otherbots(message):
#    msg = f'<b>–£—Å—ñ –±–æ—Ç–∏ –∑ —Ç–µ—Å—Ç–∞–º–∏ –ó–ù–û:</b>\n\n‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è - @geozno_bot\n‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ - @ukrlzno_bot'
#    bot.send_message(message.chat.id, msg, parse_mode='html')



def checking_ques(message, skipped_ques=None, subject=None):
    if subject is None:
        sql.execute(f"SELECT cursub FROM users WHERE chatid = '{message.chat.id}'")
        subject = sql.fetchone()
        subject=subject[0]
    sql.execute(f"SELECT curques FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    res=sql.fetchone()
    if res is None:
        return
    user_question=res[0]
    if skipped_ques!=None:
        user_question=skipped_ques
    if user_question>last_ques_check(subject):
        return bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∏ —É—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Ç–µ—Å—Ç–∏. –Ø–∫ —Ç—ñ–ª—å–∫–∏ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç—ñ zno.osvita.ua –∑–±—ñ–ª—å—à–∏—Ç—å—Å—è, –≤–æ–Ω–∏ –∑'—è–≤–ª—è—Ç—å—Å—è —ñ —É –≤–∞—Å.")
    if user_question<=15:  
        url = f"https://zno.osvita.ua/{subject}/list.html"
    elif user_question>15:
        if user_question%15!=0:
            url=f'https://zno.osvita.ua/{subject}/all/{user_question - (user_question%15)}/' 
        else:   
            if int(user_question/15)>=2:
                url=f'https://zno.osvita.ua/{subject}/all/{user_question - 15}/'
            else:
                url=f'https://zno.osvita.ua/{subject}/all/{user_question}/'
    #else:
    #    url=f'https://zno.osvita.ua/{subject}/all/{user_question}/'
    getting_ques(message, user_question, url, subject, skipped_ques)

def getting_ques(message, user_question, url, subject, skipped_ques=None):
    headers = {"user-agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"}
    req = requests.get(url, headers=headers)
    soup = BeautifulSoup(req.content, "html.parser")
    form = soup.find('form', {"id":f'q_form_{user_question}'})
    if form is None:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—ñ–¥–æ–º—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É (–∫–æ–Ω—Ç–∞–∫–∏ –≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞).")
    question = f'<b>–ó–∞–≤–¥–∞–Ω–Ω—è #{user_question}</b>\n'
    for row in form.find("div", class_="question").find_all("p"):
        if row.get_text()=='' or row.get_text()=='\n':
            continue
        question = question + html_fix(row.contents)+'\n'
    action = form.find("div", class_="q-info")
    if action==None:
        action = form.find("div", class_="select-answers-title")
    action = action.get_text(strip=True)

    right_answer=form.find("input", {"type":"hidden", "name":"result"}).get("value")
    if right_answer is None:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—ñ–¥–æ–º—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É (–∫–æ–Ω—Ç–∞–∫–∏ –≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞).")
    else:
        right_answer = str(right_answer)
    true_answer_list = {"a": "–∞", "b": "–±", "c": "–≤", "d":"–≥", "e":"–¥"}
    for row in true_answer_list:
        if row in right_answer:
            right_answer = right_answer.replace(row, true_answer_list[row])
    right_answer=right_answer.upper()
    answers_list=[]
    items = form.find_all("div", class_="answers")
    if items!=None:
        for item in items:
            for item_answer in item.find_all("div"):
                #print(added_item)
                #print(item_answer.find("span").get_text())
                #added_item=added_item.replace(item_answer.find("span").get_text(), '', 1)
                if item_answer.get('class')[0] == 'quest-title':
                    quest_title=item_answer.contents[0]
                    question = f'{question}\n{quest_title}'
                else:
                    added_items = item_answer.contents
                    number = item_answer.find("span").get_text(strip=True)
                    answers_list.append(number)
                    added_items.remove(item_answer.find("span"))
                    #added_item=item_answer.get_text()
                    added_item=html_fix(added_items)
                    
                    question = f'{question}\n{number}) {added_item}'
            question = question+'\n'
    
    img = form.find("img")
    if img != None:
        img_link = f"zno.osvita.ua{img.get('src')}"
    else:
        img_link=None
    
    lets_answer_markup = types.InlineKeyboardMarkup()
    lets_answer_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-one-{subject}-{right_answer.replace(";", "")}{check_skipped(skipped_ques)}'))
    lets_answer_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
    
    lets_answer_many_markup = types.InlineKeyboardMarkup()
    lets_answer_many_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-many-{subject}-{right_answer.replace(";", "")}{check_skipped(skipped_ques)}'))
    lets_answer_many_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
    ques_len = len(f'{question}\n{action}')
    if action == '–í–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:':
        if img_link==None:
            bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
        else:
            bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
    elif action == '–ü–æ–∑–Ω–∞—á—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:':
        right_answer = right_answer.replace(";", "")
        for row in right_answer:
            if row.isdigit():
                right_answer = right_answer.replace(row, "")
        radio_answer_markup = types.InlineKeyboardMarkup(row_width=2)
        if len(right_answer)==1:
            for row in answers_list:
                if row==right_answer:
                    cbdata = f'right-{subject}-{right_answer}{check_skipped(skipped_ques)}'
                else:
                    cbdata = f'wrong-{subject}-{right_answer}{check_skipped(skipped_ques)}'
                radio_answer_markup.add(types.InlineKeyboardButton(row, callback_data=cbdata))
            if answers_list==[]:
                radio_answer_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-one-{subject}-{right_answer.replace(";", "").upper()}{check_skipped(skipped_ques)}'))
            radio_answer_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
            if img_link==None:
                bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, radio_answer_markup, question, action), parse_mode='html', reply_markup=radio_answer_markup)
            else:
                bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, radio_answer_markup, question, action), parse_mode='html', reply_markup=radio_answer_markup)
        else:
            lets_answer_markup = types.InlineKeyboardMarkup()
            lets_answer_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'answer-one-{subject}-{right_answer.replace(";", "").upper()}{check_skipped(skipped_ques)}'))
            lets_answer_markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip-{subject}-{right_answer.replace(";", "")}'))
            radio_answer_markup = None
            if img_link==None:
                bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
            else:
                bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, lets_answer_markup, question, action), parse_mode='html', reply_markup=lets_answer_markup)
    elif action == '–í–ø–∏—à—ñ—Ç—å —Ü–∏—Ñ—Ä–∏:':
        right_answer = right_answer.replace(";", "")
        if img_link==None:
            bot.send_message(message.chat.id, send_parts(message, ques_len, img_link, lets_answer_many_markup, question, action), parse_mode='html', reply_markup=lets_answer_many_markup)
        else:
            bot.send_photo(message.chat.id, img_link, caption=send_parts(message, ques_len, img_link, lets_answer_many_markup, question, action), parse_mode='html', reply_markup=lets_answer_many_markup)

def html_fix(added_items):
    added_item=''
    for row in added_items:
        added_item=added_item+str(row)
    added_item = added_item.replace("<sup>", "")
    added_item = added_item.replace("</sup>", "")
    added_item = added_item.replace("<sub>", "")
    added_item = added_item.replace("</sub>", "")
    added_item = added_item.replace("<small>", "")
    added_item = added_item.replace("</small>", "")
    added_item = added_item.replace("<ins>", "")
    added_item = added_item.replace("</ins>", "")
    added_item = added_item.replace("<br>", "\n")
    added_item = added_item.replace("</br>", "\n")
    added_item = added_item.replace("br>", "\n")
    added_item = added_item.replace("<br\>", "\n")
    added_item = added_item.replace("</br", "\n")
    added_item = added_item.replace("br", "\n")
    return added_item

def send_parts(message, ques_len, img_link, reply_markup, question, action):
    if img_link==None:
        if ques_len>=4086:
            bot.send_message(message.chat.id, html_fix(f'{question[:round((ques_len)/2)]}...'), parse_mode='html')
            return html_fix(f'...{question[ques_len-round((ques_len)/2):]}\n{action}')
        else:
            return html_fix(f'{question}\n{action}')
    else:
        if ques_len>=4086:
            bot.send_photo(message.chat.id, img_link, caption=html_fix(f'{question[:round((ques_len)/2)]}'), parse_mode='html')
            return html_fix(f'...{question[ques_len-round((ques_len)/2):]}\n{action}')
        else:
            return html_fix(f'{question}\n{action}')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        if call.data == 'start':
            msg=f'‚úÖ –ì–∞—Ä–∞–∑–¥. –ß–∞—Å —Ä–æ–∑–ø–æ—á–∏–Ω–∞—Ç–∏! –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —Ç–µ—Å—Ç–∏ –∑ —è–∫–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–π—Ç–∏. –í–∏ —Ç–∞–∫–æ–∂ –∑–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç, —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ—é /changesub.'
            bot.send_message(call.message.chat.id, msg, reply_markup=subjects_reply)
            #sending_new(call.message)
        elif 'globalstatistics-' in call.data:
            subject = call.data.replace('globalstatistics-', '')
            global_statistics_reply=types.InlineKeyboardMarkup(row_width=2)
            for row in subjects_dict:
                global_statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'globalstatistics-{row}'))
            bot.edit_message_text(text=get_global_statistics(call.message, subject, call), chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=global_statistics_reply, parse_mode='html')
        elif 'statistics-' in call.data:
            subject = call.data.replace('statistics-', '')
            statistics_reply=types.InlineKeyboardMarkup(row_width=2)
            for row in subjects_dict:
                statistics_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'statistics-{row}'))
            bot.edit_message_text(text=get_statistics(call.message, subject, call), chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=statistics_reply, parse_mode='html')
        elif 'change-' in call.data:
            subject = call.data.replace('change-', '')
            change_sub(call.message, subject)
        elif 'answer-many-' in call.data:
            right_answer=call.data.replace('answer-many-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            get_answer = bot.send_message(call.message.chat.id, "–Ø–∫–∞ –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å? –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –º–æ–∂–Ω–∞ –Ω–∞–¥–∞—Ç–∏ —É –±—É–¥—å-—è–∫—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ.")
            bot.register_next_step_handler(get_answer, sending_many_answer, right_answer, subject, skipped_ques)
        elif 'answer-one-' in call.data:
            right_answer=call.data.replace('answer-one-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            get_answer = bot.send_message(call.message.chat.id, "–Ø–∫–∞ –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å?")
            bot.register_next_step_handler(get_answer, sending_answer, right_answer, subject, skipped_ques)
        elif 'wrong-' in call.data:
            right_answer = call.data.replace('wrong-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1}, curques = curques + {1} WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(call.message.chat.id, f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html')
            upd_skipped(call.message, skipped_ques, subject)
        elif 'right-' in call.data:
            right_answer = call.data.replace('right-', '', 1)
            right_answer, skipped_ques = callback_check_skipped(right_answer)
            subject = right_answer[:right_answer.index('-')]
            if 'ukraine-history' in call.data:
                subject = 'ukraine-history'
                right_answer = right_answer.replace("ukraine-history", "")
            right_answer = right_answer[right_answer.index('-')+1:]
            sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1}, curques = curques + {1} WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(call.message.chat.id, f"‚úÖ –í—ñ—Ç–∞—é, –≤–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html')
            upd_skipped(call.message, skipped_ques, subject)
        elif 'skip-' in call.data:
            right_answer = call.data.replace('skip-', '', 1)
            subject = right_answer[:right_answer.index('-')]
            right_answer = right_answer[right_answer.index('-')+1:]
            if call.message.text is None:
                msg = call.message.caption
            else:
                msg = call.message.text
            ques_num=msg.replace('–ó–∞–≤–¥–∞–Ω–Ω—è #', '')[:msg.replace('–ó–∞–≤–¥–∞–Ω–Ω—è #', '').index('\n')]
            sql.execute(f"SELECT subject FROM skipped WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}' AND curques = {ques_num}")
            res=sql.fetchone()
            if res is None:
                sql.execute("INSERT INTO skipped VALUES (%s, %s, %s)", (call.message.chat.id, subject, ques_num))
                db.commit()
                sql.execute(f"UPDATE subjects SET skipped_answers = skipped_answers + {1}, curques = curques + {1} WHERE chatid = '{call.message.chat.id}' AND subject = '{subject}'")
                db.commit()
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, f"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –Ω—å–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skipped.", parse_mode='html')
                sending_new(call.message)
                return
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –Ω—å–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skipped.", parse_mode='html')
        

def sending_answer(message, right_answer, subject, skipped_ques=None):
    if message.text=='/cancel':
        return bot.send_message(message.chat.id, f'‚úÖ –î–æ–±—Ä–µ! –Ø–∫ —Ç—ñ–ª—å–∫–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.')
    if message.text.isdigit()==False:
        right_counter=0
        if fix_answer(message.text) is None:
            return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ –ê-–î –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —â–µ —Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /resetquestion.")
        for i in range(len(right_answer)):
            try:
                if fix_answer(message.text)[i] == right_answer[i]:
                    sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
                    db.commit()
                    right_counter+=1
                else:
                    sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
                    db.commit()
            except IndexError:
                pass
        if right_counter==len(right_answer):
            msg = f"‚úÖ –í—ñ—Ç–∞—é, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (<b>{right_answer}</b>) –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∞–≤–∏–ª—å–Ω–∞."
        elif right_counter==0:
            msg = f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>."
        else:
            msg = f"‚úÖ‚ùå –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.\n–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: <b>{right_counter}</b>."
        sql.execute(f"UPDATE subjects SET curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
        db.commit()
        bot.send_message(message.chat.id, msg, parse_mode='html')
        upd_skipped(message, skipped_ques, subject)
    elif message.text.isdigit()==True:
        if message.text.upper() == right_answer:
            sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(message.chat.id, f"‚úÖ –í—ñ—Ç–∞—é, –≤–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html')
            upd_skipped(message, skipped_ques, subject)
        else:
            sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(message.chat.id, f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{right_answer}</b>.", parse_mode='html')
            upd_skipped(message, skipped_ques, subject)
    

def sending_many_answer(message, right_answer, subject, skipped_ques=None):
    if message.text=='/cancel':
        return bot.send_message(message.chat.id, f'‚úÖ –î–æ–±—Ä–µ! –Ø–∫ —Ç—ñ–ª—å–∫–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.')
    user_answer = fix_answer(message.text)
    if user_answer is None:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –ó'—è–≤–∏–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ –ê-–î –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —â–µ —Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /resetquestion.")
    msg_right_answer = ''
    for arow in right_answer:
        msg_right_answer=f'{msg_right_answer}{arow};'
    for row in right_answer:
        if row not in user_answer:
            sql.execute(f"UPDATE subjects SET wrong_answers = wrong_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
            db.commit()
            bot.send_message(message.chat.id, f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{msg_right_answer}</b>.", parse_mode='html')
            return
    sql.execute(f"UPDATE subjects SET right_answers = right_answers + {1}, curques = curques + {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    db.commit()
    bot.send_message(message.chat.id, f"‚úÖ –í—ñ—Ç–∞—é, –≤–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{msg_right_answer}</b>.", parse_mode='html')
    upd_skipped(message, skipped_ques, subject)


def sending_new(message):
    time.sleep(5)
    checking_ques(message)

def change_sub(message, subject):
    msg = f'–í–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç <b>{subjects_dict[subject]}</b> –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.'
    bot.edit_message_text(msg, chat_id=message.chat.id, message_id=message.message_id, parse_mode='html', reply_markup=None)
    sql.execute(f"SELECT * FROM users WHERE chatid = '{message.chat.id}'")
    user=sql.fetchone()
    if user is None:
        sql.execute("INSERT INTO users VALUES (%s, %s)", (message.chat.id, subject))
        db.commit()
    else:
        sql.execute(f"UPDATE users SET cursub = '{subject}' WHERE chatid = '{message.chat.id}'")
        db.commit()
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
    user_subjects=sql.fetchone()
    if user_subjects is None:
        sql.execute("INSERT INTO subjects VALUES (%s, %s, %s, %s, %s, %s)", (message.chat.id, subject, 0, 0, 0, 1))
        db.commit()
    checking_ques(message)


def subjects_keyboard():
    #subjects_dict={'geography':'–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è', 'ukrainian':'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'mathematics':'–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'}
    global subjects_reply
    subjects_reply=types.InlineKeyboardMarkup(row_width=2)
    for row in subjects_dict:
        subjects_reply.add(types.InlineKeyboardButton(subjects_dict[row], callback_data=f'change-{row}'))

subjects_keyboard()


def sub_to_right(subject):
   if subject in subjects_dict:
        return subjects_dict[subject]
    
def fix_answer(answer):
    true_answer_list = {"a": "–∞", "b": "–±", "c": "–≤", "d":"–≥", "e":"–¥"}
    answer = answer.lower()
    for row in answer:
        if row not in true_answer_list and row not in true_answer_list.values():
            return None
    for row in true_answer_list:
        if row in answer.lower():
            answer = answer.replace(row, true_answer_list[row])
    answer=answer.upper()
    return answer


def check_skipped(skipped_ques):
    if skipped_ques is None:
        return ''
    else:
        return f'_{skipped_ques}'

def callback_check_skipped(right_answer):
    if '_' in right_answer:
        skipped_ques=right_answer[right_answer.index('_')+1:]
        right_answer=right_answer.replace(f'_{skipped_ques}', '')
    else:
        skipped_ques=None
    return right_answer, skipped_ques

def upd_skipped(message, skipped_ques, subject):
    if skipped_ques==None:
        return sending_new(message)
    sql.execute(f"DELETE FROM skipped WHERE chatid = '{message.chat.id}' AND curques = {skipped_ques} AND subject = '{subject}'")
    db.commit()
    sql.execute(f"SELECT * FROM subjects WHERE chatid = '{message.chat.id}' AND subject = '{subject}' AND curques = {int(skipped_ques)-1}")
    if sql.fetchone() is None:
        sql.execute(f"UPDATE subjects SET skipped_answers = skipped_answers - {1}, curques = curques - {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
        db.commit()
    else:
        sql.execute(f"UPDATE subjects SET skipped_answers = skipped_answers - {1} WHERE chatid = '{message.chat.id}' AND subject = '{subject}'")
        db.commit()




    

bot.polling(none_stop=True)